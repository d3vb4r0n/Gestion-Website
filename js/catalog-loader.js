// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–∞–ª–æ–≥–∞

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
    if (window.location.pathname.includes('catalog.html')) {
        await loadCatalogFromDB();
    }
});

async function loadCatalogFromDB() {
    try {
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î...');
        const products = await fetch('http://localhost:8080/api/products/available')
            .then(res => res.json());
        
        console.log('–ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:', products.length);
        
        if (products.length === 0) {
            console.warn('–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î');
            return; // –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π HTML
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const categories = {
            '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ': [],
            '–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ': [],
            '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ': []
        };
        
        products.forEach(product => {
            if (categories[product.category]) {
                categories[product.category].push(product);
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        updateCategory('corporate', '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ', categories['–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ']);
        updateCategory('family', '–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ', categories['–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ']);
        updateCategory('civil', '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ', categories['–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ']);
        
        console.log('‚úÖ –¢–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î:', error);
        console.log('–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ HTML');
    }
}

function updateCategory(categoryId, categoryName, products) {
    const categoryDiv = document.getElementById(categoryId);
    if (!categoryDiv || products.length === 0) return;
    
    const gridDiv = categoryDiv.querySelector('.services-grid');
    if (!gridDiv) return;
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã
    gridDiv.innerHTML = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–î
    products.forEach(product => {
        const card = createProductCard(product);
        gridDiv.appendChild(card);
    });
}

function createProductCard(product) {
    const card = document.createElement('div');
    card.className = 'service-card';
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    let imagePath = product.imageUrl || '../images/default.jpg';
    // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /images/, –¥–æ–±–∞–≤–ª—è–µ–º ..
    if (imagePath.startsWith('/images/')) {
        imagePath = '..' + imagePath;
    }
    
    card.innerHTML = `
        <div class="service-card__image">
            <img src="${imagePath}" alt="${product.name}" onerror="this.src='../images/default.jpg'">
        </div>
        <div class="service-card-content">
            <h3>${product.name}</h3>
            <p class="service-card-price">–æ—Ç ${product.price.toLocaleString('ru-RU')} ‚ÇΩ</p>
            <p class="service-card-brief">${truncateText(product.description, 80)}</p>
        </div>
        <div class="service-card-details">
            <div>
                <h3>${product.name}</h3>
                <p><strong>–¶–µ–Ω–∞:</strong> –æ—Ç ${product.price.toLocaleString('ru-RU')} ‚ÇΩ</p>
                <p>${product.description}</p>
                ${product.stock > 0 
                    ? `<p><strong>–î–æ—Å—Ç—É–ø–Ω–æ:</strong> ${product.stock} –º–µ—Å—Ç</p>` 
                    : '<p><strong>–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</strong></p>'
                }
            </div>
            <button class="order-button" onclick="orderService('${escapeHtml(product.name)}')">–ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É</button>
        </div>
    `;
    
    return card;
}

function truncateText(text, maxLength) {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

console.log('üì¶ Catalog loader script loaded');
