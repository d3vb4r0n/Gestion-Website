// üîå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Frontend —Å Backend API

// ============================================
// 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// ============================================

const API_BASE_URL = 'http://localhost:8080/api';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
async function apiRequest(endpoint, options = {}) {
    try {
        const response = await fetch(`${API_BASE_URL}${endpoint}`, {
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            },
            ...options
        });
        
        if (!response.ok) {
            const error = await response.json().catch(() => ({}));
            throw new Error(error.message || `HTTP ${response.status}`);
        }
        
        return await response.json();
    } catch (error) {
        console.error('API Error:', error);
        throw error;
    }
}

// ============================================
// 2. –°–¢–†–ê–ù–ò–¶–ê: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø/–í–•–û–î (pages/auth.html)
// ============================================

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
async function registerUser(formData) {
    const data = {
        username: formData.get('username'),
        email: formData.get('email'),
        password: formData.get('password'),
        phoneNumber: formData.get('phone')
    };
    
    try {
        const response = await apiRequest('/auth/register', {
            method: 'POST',
            body: JSON.stringify(data)
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±–æ–∏—Ö –º–µ—Å—Ç–∞—Ö –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        localStorage.setItem('user', JSON.stringify(response));
        localStorage.setItem('currentUser', JSON.stringify(response));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
        if (typeof updateAuthUI === 'function') {
            updateAuthUI();
        }
        
        window.location.href = '/index.html';
    } catch (error) {
        alert(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`);
    }
}

// –í—Ö–æ–¥
async function loginUser(formData) {
    const data = {
        username: formData.get('username'),
        password: formData.get('password')
    };
    
    try {
        const response = await apiRequest('/auth/login', {
            method: 'POST',
            body: JSON.stringify(data)
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±–æ–∏—Ö –º–µ—Å—Ç–∞—Ö –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        localStorage.setItem('user', JSON.stringify(response));
        localStorage.setItem('currentUser', JSON.stringify(response));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
        if (typeof updateAuthUI === 'function') {
            updateAuthUI();
        }
        
        window.location.href = '/index.html';
    } catch (error) {
        alert(`–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${error.message}`);
    }
}

// –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
document.getElementById('registerForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    await registerUser(formData);
});

// –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
document.getElementById('loginForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    await loginUser(formData);
});

// ============================================
// 3. –°–¢–†–ê–ù–ò–¶–ê: –ö–ê–¢–ê–õ–û–ì (pages/catalog.html)
// ============================================

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
async function loadProducts() {
    try {
        const products = await apiRequest('/products/available');
        displayProducts(products);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
function displayProducts(products) {
    const container = document.getElementById('productsContainer');
    if (!container) return;
    
    container.innerHTML = products.map(product => `
        <div class="product-card" data-id="${product.id}">
            <img src="${product.imageUrl || '/images/default-product.jpg'}" 
                 alt="${product.name}"
                 class="product-image">
            <div class="product-info">
                <span class="product-category">${product.category}</span>
                <h3 class="product-name">${product.name}</h3>
                <p class="product-description">${product.description}</p>
                <div class="product-footer">
                    <span class="product-price">${product.price.toLocaleString('ru-RU')} ‚ÇΩ</span>
                    ${product.stock > 0 
                        ? `<span class="product-stock">–í –Ω–∞–ª–∏—á–∏–∏: ${product.stock}</span>`
                        : `<span class="product-out-of-stock">–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</span>`
                    }
                </div>
                <button onclick="viewProduct(${product.id})" class="btn-view">
                    –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                </button>
            </div>
        </div>
    `).join('');
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function filterByCategory(category) {
    try {
        const products = category === 'all' 
            ? await apiRequest('/products/available')
            : await apiRequest(`/products/category/${encodeURIComponent(category)}`);
        displayProducts(products);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', error);
    }
}

// –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
async function searchProducts(query) {
    if (!query || query.length < 2) {
        loadProducts();
        return;
    }
    
    try {
        const products = await apiRequest(`/products/search?name=${encodeURIComponent(query)}`);
        displayProducts(products);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
    }
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞
async function viewProduct(productId) {
    try {
        const product = await apiRequest(`/products/${productId}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏
        showProductModal(product);
    } catch (error) {
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ');
    }
}

function showProductModal(product) {
    // –°–æ–∑–¥–∞—ë–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.getElementById('productModal') || createProductModal();
    modal.querySelector('.modal-title').textContent = product.name;
    modal.querySelector('.modal-image').src = product.imageUrl || '/images/default-product.jpg';
    modal.querySelector('.modal-category').textContent = product.category;
    modal.querySelector('.modal-description').textContent = product.description;
    modal.querySelector('.modal-price').textContent = `${product.price.toLocaleString('ru-RU')} ‚ÇΩ`;
    modal.style.display = 'block';
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞
if (document.getElementById('productsContainer')) {
    loadProducts();
    
    // –ü–æ–∏—Å–∫
    document.getElementById('searchInput')?.addEventListener('input', (e) => {
        searchProducts(e.target.value);
    });
    
    // –§–∏–ª—å—Ç—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    document.querySelectorAll('.category-filter').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const category = e.target.dataset.category;
            filterByCategory(category);
        });
    });
}

// ============================================
// 4. –°–¢–†–ê–ù–ò–¶–ê: –ö–û–ù–¢–ê–ö–¢–´ (pages/contacts.html)
// ============================================

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞/—Å–æ–æ–±—â–µ–Ω–∏—è
async function submitReview(formData) {
    const data = {
        name: formData.get('name'),
        email: formData.get('email'),
        phone: formData.get('phone') || null,
        message: formData.get('message')
    };
    
    try {
        const response = await apiRequest('/reviews', {
            method: 'POST',
            body: JSON.stringify(data)
        });
        
        alert('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
        // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º reset() –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –≤—ã–∑—ã–≤–∞—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        
        return response;
    } catch (error) {
        alert(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`);
        throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ
    }
}

// –§–æ—Ä–º–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
document.getElementById('contactForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const formData = new FormData(e.target);
    const email = formData.get('email');
    const name = formData.get('name');
    const message = formData.get('message');
    
    if (!name || name.length < 2) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
        return;
    }
    
    if (!email || !email.includes('@')) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
        return;
    }
    
    if (!message || message.length < 10) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)');
        return;
    }
    
    await submitReview(formData);
});

// ============================================
// 5. –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ (pages/admin.html)
// ============================================

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤
async function loadReviews() {
    try {
        const reviews = await apiRequest('/reviews');
        displayReviews(reviews);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
async function loadUnreadReviews() {
    try {
        const reviews = await apiRequest('/reviews/unread');
        displayReviews(reviews);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
        document.getElementById('unreadCount').textContent = reviews.length;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤:', error);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
function displayReviews(reviews) {
    const container = document.getElementById('reviewsContainer');
    if (!container) return;
    
    container.innerHTML = reviews.map(review => `
        <div class="review-card ${review.isRead ? 'read' : 'unread'}" data-id="${review.id}">
            <div class="review-header">
                <strong>${review.name}</strong>
                <span class="review-status status-${review.status.toLowerCase()}">${review.status}</span>
            </div>
            <div class="review-meta">
                <span>üìß ${review.email}</span>
                ${review.phone ? `<span>üì± ${review.phone}</span>` : ''}
                <span>üïí ${new Date(review.createdAt).toLocaleString('ru-RU')}</span>
                <span>üåê ${review.ipAddress || 'N/A'}</span>
            </div>
            <p class="review-message">${review.message}</p>
            <div class="review-actions">
                ${!review.isRead ? `
                    <button onclick="markAsRead(${review.id})" class="btn-small">
                        –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º
                    </button>
                ` : ''}
                ${review.status === 'PENDING' ? `
                    <button onclick="updateReviewStatus(${review.id}, 'APPROVED')" class="btn-approve">
                        –û–¥–æ–±—Ä–∏—Ç—å
                    </button>
                    <button onclick="updateReviewStatus(${review.id}, 'REJECTED')" class="btn-reject">
                        –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                    </button>
                ` : ''}
                <button onclick="deleteReview(${review.id})" class="btn-delete">
                    –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        </div>
    `).join('');
}

// –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
async function markAsRead(reviewId) {
    try {
        await apiRequest(`/reviews/${reviewId}/read`, { method: 'PATCH' });
        loadReviews(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫
    } catch (error) {
        alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
    }
}

// –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞
async function updateReviewStatus(reviewId, status) {
    try {
        await apiRequest(`/reviews/${reviewId}/status?status=${status}`, { method: 'PATCH' });
        loadReviews();
    } catch (error) {
        alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
    }
}

// –£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤
async function deleteReview(reviewId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤?')) return;
    
    try {
        await apiRequest(`/reviews/${reviewId}`, { method: 'DELETE' });
        loadReviews();
    } catch (error) {
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞');
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
async function loadAllProducts() {
    try {
        const products = await apiRequest('/products');
        displayAdminProducts(products);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    }
}

async function createProduct(formData) {
    const data = {
        name: formData.get('name'),
        description: formData.get('description'),
        price: parseFloat(formData.get('price')),
        category: formData.get('category'),
        imageUrl: formData.get('imageUrl'),
        stock: parseInt(formData.get('stock')),
        isAvailable: formData.get('isAvailable') === 'on'
    };
    
    try {
        await apiRequest('/products', {
            method: 'POST',
            body: JSON.stringify(data)
        });
        
        alert('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
        loadAllProducts();
    } catch (error) {
        alert(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${error.message}`);
    }
}

async function toggleProductAvailability(productId) {
    try {
        await apiRequest(`/products/${productId}/toggle-availability`, { method: 'PATCH' });
        loadAllProducts();
    } catch (error) {
        alert('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏');
    }
}

async function deleteProduct(productId) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?')) return;
    
    try {
        await apiRequest(`/products/${productId}`, { method: 'DELETE' });
        loadAllProducts();
    } catch (error) {
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
if (document.getElementById('reviewsContainer')) {
    loadUnreadReviews();
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(loadUnreadReviews, 30000);
}

// ============================================
// 6. –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–ò
// ============================================

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function isLoggedIn() {
    return localStorage.getItem('user') !== null;
}

// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getCurrentUser() {
    const userJson = localStorage.getItem('user');
    return userJson ? JSON.parse(userJson) : null;
}

// –í—ã—Ö–æ–¥
function logout() {
    localStorage.removeItem('user');
    window.location.href = '/index.html';
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ header
function updateUserDisplay() {
    const user = getCurrentUser();
    const userDisplay = document.getElementById('userDisplay');
    
    if (userDisplay && user) {
        userDisplay.innerHTML = `
            <span>–ü—Ä–∏–≤–µ—Ç, ${user.username}!</span>
            <button onclick="logout()">–í—ã–π—Ç–∏</button>
        `;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    updateUserDisplay();
});

// ============================================
// 7. –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
// ============================================

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
window.addEventListener('unhandledrejection', (event) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', event.reason);
    
    if (event.reason.message.includes('Failed to fetch')) {
        alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080');
    }
});
